/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';

// Precache all of the assets generated by the bundler.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Precache important resources for offline game play.
precacheAndRoute([
  { url: 'button-top-left.mp3', revision: '1' },
  { url: 'button-top-right.mp3', revision: '1' },
  { url: 'button-bottom-left.mp3', revision: '1' },
  { url: 'button-bottom-right.mp3', revision: '1' },
  { url: 'error.mp3', revision: '1' },
]);

// Generically cache resources as they are used with a CacheFirst strategy.
registerRoute(
  ({ url }) => {
    const matches = ['.png', '.ico'].some((ext) => url.pathname.endsWith(ext));
    return url.origin === self.location.origin && matches;
  },
  new CacheFirst({
    cacheName: 'assets',
  })
);

// Support triggering of skipWaiting for service updates.
clientsClaim();
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
